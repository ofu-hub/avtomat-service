@page "/"
@using AvtomatService.Contracts.Warehouse
@inject HttpClient HttpClient

<div class="m-5">
    <h2>Управление складами и товарами</h2>

    <h3>Кладовщик: @User</h3>
    
    <button type="button" class="btn btn-success">Добавить склад</button>

    @if (_warehouses != null)
    {
        @foreach (var warehouse in _warehouses)
        {
            <br/>
            <div id="@warehouse.Id">
                <div>
                    <h4>Наименование склада: @warehouse.Title. Топ-3 товара</h4>
                    <button type="button" class="btn btn-info">Выбрать склад</button>
                    <button type="button" class="btn btn-success">Добавить продукт</button>
                </div>
            <table class="table">
                <thead>
                <tr>
                    <th>Товар</th>
                    <th>Количество</th>
                    <th>Действия</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var product in warehouse.Products.OrderByDescending(p => p.Quantity).Take(3))
                {
                    <tr>
                        <td>
                            <p>@product.Title</p>
                        </td>
                        <td>
                            <p>@product.Quantity</p>
                        </td>
                        <td>
                            @if (product.Quantity != 0)
                            {
                                <button type="button" class="btn btn-danger" @onclick="(() => ChangeQuantity(product.Id, -1))">Уменьшить товар</button>
                                <button type="button" class="btn btn-success" @onclick="(() => ChangeQuantity(product.Id, 1))">Увеличить товар</button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-warning" @onclick="(() => DeleteProduct(product.Id))">Удалить товар</button>
                                <button type="button" class="btn btn-success" @onclick="(() => ChangeQuantity(product.Id, 1))">Увеличить товар</button>
                            }
                            <button type="button" class="btn btn-info">Обновить данные</button>
                            <button type="button" class="btn btn-info">Подробнее о товаре</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
            </div>
        }
    }
    else
    {
        <p>Нет доступных складов.</p>
        <button type="button" class="btn btn-success">Создать склад</button>
    }
</div>

@code {
    private List<WarehouseDetailedDto>? _warehouses = new List<WarehouseDetailedDto>();
    private string User = "Дмитрий";

    protected override async Task OnInitializedAsync()
    {
        _warehouses = await HttpClient.GetFromJsonAsync<List<WarehouseDetailedDto>>("api/Warehouses") ?? new List<WarehouseDetailedDto>();
    }

    private async Task ChangeQuantity(Guid productId, int quantityChange)
    {
        await HttpClient.PostAsJsonAsync($"api/Products/{productId}/changequantity", quantityChange);
        _warehouses = await HttpClient.GetFromJsonAsync<List<WarehouseDetailedDto>>("api/Warehouses") ?? new List<WarehouseDetailedDto>();
    }
    
    private async Task DeleteProduct(Guid productId)
    {
        await HttpClient.DeleteAsync($"api/Products/{productId}");
        _warehouses = await HttpClient.GetFromJsonAsync<List<WarehouseDetailedDto>>("api/Warehouses") ?? new List<WarehouseDetailedDto>();
    }
}